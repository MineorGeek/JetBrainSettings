<application>
  <component name="AppStorage">
    <histories>
      <item value="review" />
      <item value="加密算法" />
      <item value="AES" />
      <item value="编码" />
      <item value="字符集" />
      <item value="加密" />
      <item value="牛" />
      <item value="multi" />
      <item value="I mean him " />
      <item value="短信" />
      <item value="seriously" />
      <item value="Marginable" />
      <item value="Liquidate" />
      <item value="二期" />
      <item value="Whitelist" />
      <item value="rank" />
      <item value="排列优先级" />
      <item value="排序优先级" />
      <item value="初始化仓库" />
      <item value="market capitalization" />
      <item value="市值" />
      <item value="Market value" />
      <item value="市盈率" />
      <item value="Although Dapper shares many of its high-level ideas with systems such as Pinpoint and Magpie, our implementation contains a number of new contributions in this space." />
      <item value="The value of Dapper as a platform for development of performance analysis tools, as much as a monitoring tool in itself, is one of a few unexpected outcomes we can identify in a retrospective assessment." />
      <item value="Since Dapper has been in production and operating at large scale for years now, we decided it would be most appropriate to focus this paper on what Dapper’s deployment has taught us, how our design decisions played out, and in what ways it has been most useful." />
      <item value="appropriate" />
      <item value="These systems tend to be described in the research literature at a very early       point in their development, before there is an opportunity to clearly evaluate important design choices." />
      <item value="These systems tend to be described in the research literature at a very early  Figure 1: The path taken through a simple serving system on behalf of user request X. The letter-labeled nodes represent processes in a distributed system.  point in their development, before there is an opportunity to clearly evaluate important design choices." />
      <item value="The design space of distributed systems tracing tools has been explored in a number of excellent previous articles, among which Pinpoint [9], Magpie [3] and X-Trace [12] are most closely related to Dapper." />
      <item value="We have found that Dapper’s system-wide data often focuses a performance investigation so that other tools can be applied locally." />
      <item value="Making the system scalable and reducing performance overhead was facilitated by the use of adaptive sampling, as will be described in Section 4.4." />
      <item value="An additional design goal is for tracing data to be available for analysis quickly after it is generated: ideally within a minute. Although a trace analysis system operating on hours-old data is still quite valuable, the availability of fresh information enables faster reaction to production anomalies." />
      <item value="idealy" />
      <item value="Scalability" />
      <item value="This is especially important in a fast-paced development environment such as ours." />
      <item value="A tracing infrastructure that relies on active collaboration from application-level developers in order to function becomes extremely fragile, and is often broken due to instrumentation bugs or omissions, therefore violating the ubiquity requirement." />
      <item value="collaboration" />
      <item value="transparency" />
      <item value="compel" />
      <item value="Low overhead" />
      <item value="In addition, monitoring should always be turned on, because it is often the case that unusual or otherwise noteworthy system behavior is difﬁcult or impossible to reproduce." />
      <item value="Ubiquity is important since the usefulness of a tracing infrastructure can be severly impacted if even small parts of the system are not being monitored." />
      <item value="The scenario described above gives rise to two fundamental requirements for Dapper" />
      <item value="user-visible" />
      <item value="A front-end service may distribute a web query to many hundreds of query servers, each searching within its own piece of the index. The query may also be sent to a number of other sub-systems that may process advertisements, check spelling, or look for specialized results, including images, videos, news, and so on." />
      <item value="A web-search example will illustrate some of the challenges such a system needs to address." />
      <item value="Such systems are of special interest  because large collections of small servers are a particularly cost-efﬁcient platform for Internet services workloads. " />
      <item value="Such systems are of special interest  because large collections of small servers are a particularly cost-efﬁcient platform for Internet services workloads [4]. " />
      <item value="Such systems are of special interest  because large collections of small servers are a particularly cost-efﬁcient platform for Internet services workloads [4]. Understanding system behavior in this context requires observing related activities across many different programs and machines." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="221" />
        <entry key="ENGLISH" value="308" />
        <entry key="ARABIC" value="1" />
        <entry key="BULGARIAN" value="1" />
        <entry key="FRENCH" value="3" />
        <entry key="LATIN" value="1" />
        <entry key="JAPANESE" value="3" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="googleTranslateSettings">
      <google-translate>
        <option name="useTranslateGoogleCom" value="true" />
      </google-translate>
    </option>
    <option name="ignoreRegExp" value="" />
    <option name="translator" value="ai.youdao" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="5270ca83735d52d0" />
        <option name="appKeyConfigured" value="true" />
      </youdao-translate>
    </option>
  </component>
</application>